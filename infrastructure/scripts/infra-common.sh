#!/bin/bash

# Common utilities for infrastructure scripts
# Source this file in other scripts: source "$(dirname "$0")/infra-common.sh"

set -euo pipefail

# Color codes for better readability (optional, non-interactive safe)
if [[ -t 1 ]] && command -v tput >/dev/null 2>&1; then
  RED=$(tput setaf 1 2>/dev/null || echo '')
  GREEN=$(tput setaf 2 2>/dev/null || echo '')
  YELLOW=$(tput setaf 3 2>/dev/null || echo '')
  BLUE=$(tput setaf 4 2>/dev/null || echo '')
  RESET=$(tput sgr0 2>/dev/null || echo '')
else
  RED=''
  GREEN=''
  YELLOW=''
  BLUE=''
  RESET=''
fi

# Logging functions
log_info() {
  echo "${BLUE}[INFO]${RESET} $*"
}

log_warn() {
  echo "${YELLOW}[WARN]${RESET} $*" >&2
}

log_error() {
  echo "${RED}[ERROR]${RESET} $*" >&2
}

log_success() {
  echo "${GREEN}[SUCCESS]${RESET} $*"
}

# Check if Docker is available and running
check_docker() {
  log_info "Checking Docker availability..."
  
  if ! command -v docker >/dev/null 2>&1; then
    log_error "Docker command not found. Please install Docker."
    return 10
  fi
  
  if ! docker info >/dev/null 2>&1; then
    log_error "Docker daemon not reachable. Please start Docker."
    return 10
  fi
  
  if ! command -v docker >/dev/null 2>&1 || ! docker compose version >/dev/null 2>&1; then
    log_error "Docker Compose not available. Please install Docker Compose v2."
    return 10
  fi
  
  log_info "Docker and Docker Compose are available"
  return 0
}

# Check if a port is free on localhost
check_port_free() {
  local port="$1"
  local service_name="${2:-service}"
  
  log_info "Checking if port $port is available..."
  
  # Check if port is in use using netstat or ss
  if command -v netstat >/dev/null 2>&1; then
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
      log_error "Port $port is already in use. Set TILEMUD_${service_name^^}_PORT to override."
      return 11
    fi
  elif command -v ss >/dev/null 2>&1; then
    if ss -tuln 2>/dev/null | grep -q ":$port "; then
      log_error "Port $port is already in use. Set TILEMUD_${service_name^^}_PORT to override."
      return 11
    fi
  else
    log_warn "Cannot check port availability (netstat/ss not found). Proceeding..."
  fi
  
  log_info "Port $port is available"
  return 0
}

# Write environment file atomically
write_env_file_atomic() {
  local env_file="$1"
  local temp_file="${env_file}.tmp"
  
  log_info "Writing environment file: $env_file"
  
  # Write to temporary file first
  cat > "$temp_file" << EOF
# Generated by tilemud infrastructure scripts
# DO NOT EDIT - This file is automatically managed

# PostgreSQL connection
TILEMUD_PG_HOST=localhost
TILEMUD_PG_PORT=${TILEMUD_PG_PORT:-5438}
TILEMUD_PG_USER=${TILEMUD_PG_USER:-tilemud}
TILEMUD_PG_PASSWORD=${TILEMUD_PG_PASSWORD:-tilemud_dev_pw}
TILEMUD_PG_DB=${TILEMUD_PG_DB:-tilemud}

# Redis connection  
TILEMUD_REDIS_HOST=localhost
TILEMUD_REDIS_PORT=${TILEMUD_REDIS_PORT:-6380}

# Infrastructure configuration
TILEMUD_INFRA_NETWORK=${TILEMUD_INFRA_NETWORK:-tilemud_net}
TILEMUD_PG_VOLUME=${TILEMUD_PG_VOLUME:-tilemud_pg_data}
TILEMUD_PG_IMAGE=${TILEMUD_PG_IMAGE:-postgres:18.0-alpine}
TILEMUD_REDIS_IMAGE=${TILEMUD_REDIS_IMAGE:-redis:8.2-alpine}

# Generation timestamp
TILEMUD_ENV_GENERATED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
EOF
  
  # Atomically move temp file to final location
  mv "$temp_file" "$env_file"
  log_info "Environment file written successfully"
}

# Compute SHA256 hash of a file
hash_file() {
  local file="$1"
  
  if [[ ! -f "$file" ]]; then
    echo ""
    return 1
  fi
  
  if command -v sha256sum >/dev/null 2>&1; then
    sha256sum "$file" | cut -d' ' -f1
  elif command -v shasum >/dev/null 2>&1; then
    shasum -a 256 "$file" | cut -d' ' -f1
  else
    log_error "No SHA256 utility found (sha256sum or shasum required)"
    return 1
  fi
}

# Check basic system resources (warn only, don't fail)
check_resources() {
  log_info "Checking system resources..."
  
  # Check available memory (Linux/macOS compatible)
  if [[ -f /proc/meminfo ]]; then
    # Linux
    local available_mb
    available_mb=$(awk '/MemAvailable/ {printf "%.0f", $2/1024}' /proc/meminfo 2>/dev/null || echo "0")
    if [[ "$available_mb" -gt 0 && "$available_mb" -lt 512 ]]; then
      log_warn "Available memory is ${available_mb}MB, below recommended 512MB minimum"
    fi
  elif command -v vm_stat >/dev/null 2>&1; then
    # macOS
    log_info "macOS memory check skipped (vm_stat parsing complex)"
  fi
  
  # Check disk space for Docker
  local docker_root
  docker_root=$(docker info --format '{{.DockerRootDir}}' 2>/dev/null || echo "/var/lib/docker")
  if [[ -d "$docker_root" ]]; then
    local available_mb
    available_mb=$(df "$docker_root" | awk 'NR==2 {printf "%.0f", $4/1024}' 2>/dev/null || echo "0")
    if [[ "$available_mb" -gt 0 && "$available_mb" -lt 500 ]]; then
      log_warn "Available disk space is ${available_mb}MB, below recommended 500MB minimum"
    fi
  fi
  
  log_info "Resource check completed"
}

# Export functions for use in other scripts
export -f log_info log_warn log_error log_success
export -f check_docker check_port_free write_env_file_atomic hash_file check_resources